() => {
  this.props.navigation.navigate('RacerDetails', {
    racerkey: `${JSON.stringify(item.key)}`,
  });
}

console.log(this.state.racers[i])


  collectTime = () => {
    let currentTime = Date.now();
    //console.log("CurrentTime:",currentTime, "StartTime",this.state.startTime)
    let resolvedTime = currentTime - this.state.startTime;
    //console.log("timeDiff:",resolvedTime)

    //firebase.firestore().collection('racers').doc(key).push(resolvedTime)
    //this.setState({racers.time: resolvedTime})
    //console.log(, this.state.timeSnapshot)
  }
  associateTimewithRunner = () => {
    this.collectTime();
    const updateRef = firebase.firestore().collection('racers').doc(this.state.key);
    updateRef.add({time: this.resolvedTime})

    console.log(this.state.racers)
  }
  getRaceTime = () => {
    this.collectTime();

    let currentRacer = this.state.key;
    let updateRacerTime = firebase.firestore().collection('racers').doc(currentRacer);
    updateRacerTime.add({time: this.resolvedTime})
  }
  logIt = () => {
    this.collectTime();
    console.log(this.resolvedTime)
  }
  addRacer = (key) => {
    let currentTime = Date.now();
    let currentRacer = this.state.racers[1];
    let resolveTime = currentTime - this.state.startTime;
    console.log(resolveTime)
    firebase.firestore().collection('racers').add({ time: resolveTime})
  }
  updateRacer = () => {
    this.collectTime();
    let currentRacer = this.state.racers[1];
    console.log(currentRacer)
    firebase.firestore().collection('racers').doc(currentRacer).add({
      time: this.resolvedTime})}